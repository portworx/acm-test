# SOURCE: http://70.0.19.239:8080/2.6?mc=false&kbver=1.17.12-gke.1504&oem=esse&user=015c8ea2-660d-11eb-a2c5-c24e499c7467&b=true&s=%22type%3Dpd-standard%2Csize%3D150%22&kd=type%3Dpd-standard%2Csize%3D150&c=px-cluster-d72c9578-7bb4-4b72-b8eb-f7f7a32419b5&stork=true&lh=true&st=k8s&acr=cluster-c-selector
---
kind: Service
apiVersion: v1
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: portworx-service
  namespace: kube-system
  labels:
    name: portworx
spec:
  selector:
    name: portworx
  type: ClusterIP
  ports:
    - name: px-api
      protocol: TCP
      port: 9001
      targetPort: 9001
    - name: px-kvdb
      protocol: TCP
      port: 9019
      targetPort: 9019
    - name: px-sdk
      protocol: TCP
      port: 9020
      targetPort: 9020
    - name: px-rest-gateway
      protocol: TCP
      port: 9021
      targetPort: 9021
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: px-account
  namespace: kube-system
---

apiVersion: v1
kind: Secret
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: px-essential
  namespace: kube-system
data:
  px-essen-user-id: MDE1YzhlYTItNjYwZC0xMWViLWEyYzUtYzI0ZTQ5OWM3NDY3
  px-osb-endpoint: aHR0cHM6Ly9weGVzc2VudGlhbHMucG9ydHdvcnguY29tL29zYi9iaWxsaW5nL3YxL3JlZ2lzdGVy
---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: portworx
  namespace: kube-system
  labels:
    name: portworx
  annotations:
    portworx.com/install-source: "http://70.0.19.239:8080/2.6?mc=false&kbver=1.17.12-gke.1504&oem=esse&user=015c8ea2-660d-11eb-a2c5-c24e499c7467&b=true&s=%22type%3Dpd-standard%2Csize%3D150%22&kd=type%3Dpd-standard%2Csize%3D150&c=px-cluster-d72c9578-7bb4-4b72-b8eb-f7f7a32419b5&stork=true&lh=true&st=k8s&acr=cluster-c-selector"
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
spec:
  selector:
    matchLabels:
      name: portworx
  minReadySeconds: 0
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        name: portworx
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      hostNetwork: true
      hostPID: false
      containers:
        - name: portworx
          image: portworx/oci-monitor:2.6.3
          imagePullPolicy: Always
          args:
            ["-c", "px-cluster-d72c9578-7bb4-4b72-b8eb-f7f7a32419b5", "-s", "type=pd-standard,size=150", "-secret_type", "k8s", "-kvdb_dev", "type=pd-standard,size=150", "-b", "--oem", "esse", 
             "-x", "kubernetes"]
          env:
            - name: "PX_TEMPLATE_VERSION"
              value: "v4"
            - name: "PX_IMAGE"
              value: "portworx/px-base-enterprise:2.6.4"
            - name: "REGISTRY_USER"
              value: "pwxbuild"
            - name: "REGISTRY_PASS"
              value: "fridaydemos"
          livenessProbe:
            periodSeconds: 30
            initialDelaySeconds: 840 # allow image pull in slow networks
            httpGet:
              host: 127.0.0.1
              path: /status
              port: 9001
          readinessProbe:
            periodSeconds: 10
            httpGet:
              host: 127.0.0.1
              path: /health
              port: 9015
          terminationMessagePath: "/tmp/px-termination-log"
          securityContext:
            privileged: true
          volumeMounts:
            - name: diagsdump
              mountPath: /var/cores
            - name: dockersock
              mountPath: /var/run/docker.sock
            - name: containerdsock
              mountPath: /run/containerd
            - name: criosock
              mountPath: /var/run/crio
            - name: etcpwx
              mountPath: /etc/pwx
            - name: dev
              mountPath: /dev
            - name: optpwx
              mountPath: /opt/pwx
            - name: procmount
              mountPath: /host_proc
            - name: sysdmount
              mountPath: /etc/systemd/system
            - name: journalmount1
              mountPath: /var/run/log
              readOnly: true
            - name: journalmount2
              mountPath: /var/log
              readOnly: true
            - name: dbusmount
              mountPath: /var/run/dbus
      restartPolicy: Always
      serviceAccountName: px-account
      volumes:
        - name: diagsdump
          hostPath:
            path: /var/cores
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock
        - name: containerdsock
          hostPath:
            path: /run/containerd
        - name: criosock
          hostPath:
            path: /var/run/crio
        - name: etcpwx
          hostPath:
            path: /etc/pwx
        - name: dev
          hostPath:
            path: /dev
        - name: optpwx
          hostPath:
            path: /opt/pwx
        - name: procmount
          hostPath:
            path: /proc
        - name: sysdmount
          hostPath:
            path: /etc/systemd/system
        - name: journalmount1
          hostPath:
            path: /var/run/log
        - name: journalmount2
          hostPath:
            path: /var/log
        - name: dbusmount
          hostPath:
            path: /var/run/dbus
---
kind: Service
apiVersion: v1
metadata:
  name: portworx-api
  namespace: kube-system
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  labels:
    name: portworx-api
spec:
  selector:
    name: portworx-api
  type: ClusterIP
  ports:
    - name: px-api
      protocol: TCP
      port: 9001
      targetPort: 9001
    - name: px-sdk
      protocol: TCP
      port: 9020
      targetPort: 9020
    - name: px-rest-gateway
      protocol: TCP
      port: 9021
      targetPort: 9021
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: portworx-api
  namespace: kube-system
  labels:
    name: portworx-api
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
spec:
  selector:
    matchLabels:
      name: portworx-api
  minReadySeconds: 0
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        name: portworx-api
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      hostNetwork: true
      hostPID: false
      containers:
        - name: portworx-api
          image: k8s.gcr.io/pause:3.1
          imagePullPolicy: Always
          readinessProbe:
            periodSeconds: 10
            httpGet:
              host: 127.0.0.1
              path: /status
              port: 9001
      restartPolicy: Always
      serviceAccountName: px-account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: portworx-pvc-controller-account
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  labels:
    tier: control-plane
  name: portworx-pvc-controller
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: portworx-pvc-controller
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: portworx-pvc-controller
        tier: control-plane
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "name"
                    operator: In
                    values:
                    - portworx-pvc-controller
              topologyKey: "kubernetes.io/hostname"
      hostNetwork: true
      containers:
      - command:
        - kube-controller-manager
        - --leader-elect=true
        - --address=0.0.0.0
        - --controllers=persistentvolume-binder,persistentvolume-expander
        - --use-service-account-credentials=true
        - --leader-elect-resource-lock=configmaps
        - --leader-elect-resource-name=portworx-pvc-controller
        image: k8s.gcr.io/kube-controller-manager-amd64:v1.17.12
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 8
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 10252
            scheme: HTTP
          initialDelaySeconds: 15
          timeoutSeconds: 15
        name: portworx-pvc-controller-manager
        resources:
          requests:
            cpu: 200m
      serviceAccountName: portworx-pvc-controller-account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: px-lh-account
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: px-lighthouse
  namespace: kube-system
  labels:
    tier: px-web-console
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
  selector:
    tier: px-web-console
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: px-lighthouse
  namespace: kube-system
  labels:
    tier: px-web-console
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      tier: px-web-console
  replicas: 1
  template:
    metadata:
      labels:
        tier: px-web-console
    spec:
      initContainers:
      - name: config-init
        image: portworx/lh-config-sync:latest
        imagePullPolicy: Always
        args:
        - "init"
        env:
        - name: PX_SERVICE_TYPE
          value: "NodePort"
        volumeMounts:
        - name: config
          mountPath: /config/lh
      containers:
      - name: px-lighthouse
        image: portworx/px-lighthouse:latest
        imagePullPolicy: Always
        args: [ "-kubernetes", "true" ]
        ports:
        - containerPort: 80
        - containerPort: 443
        readinessProbe:
          httpGet:
            path: /login
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /login
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 20
        volumeMounts:
        - name: config
          mountPath: /config/lh
      - name: config-sync
        image: portworx/lh-config-sync:latest
        imagePullPolicy: Always
        args:
        - "sync"
        env:
        - name: PX_SERVICE_TYPE
          value: "NodePort"
        volumeMounts:
        - name: config
          mountPath: /config/lh
      - name: stork-connector
        image: portworx/lh-stork-connector:latest
        imagePullPolicy: Always
      serviceAccountName: px-lh-account
      volumes:
      - name: config
        emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: autopilot-config
  namespace: kube-system
data:
  config.yaml: |-
    providers:
       - name: default
         type: prometheus
         params: url=http://prometheus:9090
    min_poll_interval: 2
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  name: autopilot-account
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  labels:
    tier: control-plane
  name: autopilot
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: autopilot
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: autopilot
        tier: control-plane
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "name"
                    operator: In
                    values:
                    - autopilot
              topologyKey: "kubernetes.io/hostname"
      hostPID: false
      containers:
      - command:
        - /autopilot
        - -f
        - ./etc/config/config.yaml
        - -log-level
        - debug
        imagePullPolicy: Always
        image: portworx/autopilot:master
        resources:
          requests:
            cpu: '0.1'
        securityContext:
          privileged: false
        name: autopilot
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
      serviceAccountName: autopilot-account
      volumes:
        - name: config-volume
          configMap:
            name: autopilot-config
            items:
            - key: config.yaml
              path: config.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: autopilot
  annotations:
    configmanagement.gke.io/cluster-selector: "cluster-c-selector"
  namespace: kube-system
  labels:
    name: autopilot-service
spec:
  ports:
    - name: autopilot
      protocol: TCP
      port: 9628
  selector:
    name: autopilot
    tier: control-plane
